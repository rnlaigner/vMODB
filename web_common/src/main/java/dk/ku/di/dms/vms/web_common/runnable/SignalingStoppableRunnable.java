package dk.ku.di.dms.vms.web_common.runnable;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * Abstract class that provides common features for server classes
 */
public abstract class SignalingStoppableRunnable extends StoppableRunnable {

    protected final Logger logger = LoggerFactory.getLogger(this.getClass());
    /**
     * Protocol result. Now also any result from a thread...
     */
    public static final byte NO_RESULT = 0;
    public static final byte FINISHED = 1;

    public final CustomUncaughtExceptionHandler exceptionHandler;

    // queue serves as a channel to respond the calling thread
    protected final BlockingQueue<Byte> signal;

    // internal events generated by other threads, such as writers, e.g., channel closed, unreachable node, etc.
    // protected final BlockingQueue<Issue> issueQueue;

    public SignalingStoppableRunnable() {
        super();
        this.signal = new ArrayBlockingQueue<>(1);
        this.exceptionHandler = new CustomUncaughtExceptionHandler();
        // this.issueQueue = new LinkedBlockingQueue<>();
    }

    /**
     * Blocks the caller until this thread finishes its work.
     * @return A byte representing the result
     */
    public Byte getResult() throws InterruptedException {
        return this.signal.take();
    }

    /**
     * Callback to log error
     * x The exception. maybe we should get some information from that....
     */
//    protected void defaultLogError(Issue.Category category, int node) {
//        this.issueQueue.add( new Issue( category, node ) );
//    }

    private class CustomUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {

        @Override
        public void uncaughtException(Thread t, Throwable e) {
            signal.add( NO_RESULT );
            logger.info( e.getLocalizedMessage() );
        }
    }

}
